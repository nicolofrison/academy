SET FOREIGN_KEY_CHECKS = 0;

DROP TABLE IF EXISTS Details;
DROP TABLE IF EXISTS Episodes;
DROP TABLE IF EXISTS Movies;
DROP TABLE IF EXISTS Series;
DROP TABLE IF EXISTS Favorites;
DROP TABLE IF EXISTS Likes;
DROP TABLE IF EXISTS Reviews;
DROP TABLE IF EXISTS Views;
DROP TABLE IF EXISTS Users;

DROP VIEW IF EXISTS V_Episodes;
DROP VIEW IF EXISTS V_Movies;
DROP VIEW IF EXISTS V_Series;

CREATE TABLE Details (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(20) NOT NULL,
  description TEXT NOT NULL,
  genre VARCHAR(50) NOT NULL,
  duration TIME NOT NULL,
  actors TEXT NOT NULL,
  releaseDate DATE,
  creationDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Episodes (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  detailsId INT NOT NULL,
  quality VARCHAR(5) NOT NULL,
  seriesId INT NOT NULL,
  season INT NOT NULL,
  episode INT NOT NULL
);

CREATE TABLE Movies (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  detailsId INT NOT NULL,
  quality VARCHAR(5) NOT NULL
);

CREATE TABLE Series (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  detailsId INT NOT NULL
);

CREATE TABLE Favorites (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  moviesId INT,
  seriesId INT
);

CREATE TABLE Likes (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  episodesId INT,
  moviesId INT,
  seriesId INT
);

CREATE TABLE Reviews (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  moviesId INT,
  seriesId INT,
  rating INT(1) NOT NULL,
  description TEXT
);

CREATE TABLE Views (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  episodesId INT,
  moviesId INT
);

CREATE TABLE Users (
  id INT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(50) NOT NULL UNIQUE,
  name VARCHAR(50) NOT NULL,
  surname VARCHAR(50) NOT NULL,
  birthDate DATE NOT NULL,
  password VARCHAR(50) NOT NULL,
  newsletter TINYINT(1) NOT NULL DEFAULT false
);

ALTER TABLE `Episodes` ADD CONSTRAINT `FKEpisodesDetailsId` FOREIGN KEY (`detailsId`) REFERENCES `Details`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Movies` ADD CONSTRAINT `FKMoviesDetailsId` FOREIGN KEY (`detailsId`) REFERENCES `Details`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Series` ADD CONSTRAINT `FKSeriesDetailsId` FOREIGN KEY (`detailsId`) REFERENCES `Details`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `Episodes` ADD CONSTRAINT `FKEpisodesSeriesId` FOREIGN KEY (`seriesId`) REFERENCES `Series`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `Favorites` ADD CONSTRAINT `FKFavoritesUsersId` FOREIGN KEY (`userId`) REFERENCES `Users`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Favorites` ADD CONSTRAINT `FKFavoritesMoviesId` FOREIGN KEY (`moviesId`) REFERENCES `Movies`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Favorites` ADD CONSTRAINT `FKFavoritesSeriesId` FOREIGN KEY (`seriesId`) REFERENCES `Series`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `Likes` ADD CONSTRAINT `FKLikesUsersId` FOREIGN KEY (`userId`) REFERENCES `Users`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Likes` ADD CONSTRAINT `FKLikesEpisodesId` FOREIGN KEY (`episodesId`) REFERENCES `Episodes`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Likes` ADD CONSTRAINT `FKLikesMoviesId` FOREIGN KEY (`moviesId`) REFERENCES `Movies`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Likes` ADD CONSTRAINT `FKLikesSeriesId` FOREIGN KEY (`seriesId`) REFERENCES `Series`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `Reviews` ADD CONSTRAINT `FKReviewsUsersId` FOREIGN KEY (`userId`) REFERENCES `Users`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Reviews` ADD CONSTRAINT `FKReviewsMoviesId` FOREIGN KEY (`moviesId`) REFERENCES `Movies`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Reviews` ADD CONSTRAINT `FKReviewsSeriesId` FOREIGN KEY (`seriesId`) REFERENCES `Series`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `Views` ADD CONSTRAINT `FKViewsUsersId` FOREIGN KEY (`userId`) REFERENCES `Users`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Views` ADD CONSTRAINT `FKViewsEpisodesId` FOREIGN KEY (`episodesId`) REFERENCES `Episodes`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE `Views` ADD CONSTRAINT `FKViewsMoviesId` FOREIGN KEY (`moviesId`) REFERENCES `Movies`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

CREATE VIEW `V_Episodes`  AS SELECT `D`.*, `E`.`season`, `E`.`episode`, `E`.`quality`, COUNT(`L`.`id`) AS `likes`, COUNT(`V`.`id`) AS `views` FROM `Details` `D` INNER JOIN `Episodes` `E` ON `D`.`id` = `E`.`detailsId` INNER JOIN `Likes` `L` ON `E`.`id` = `L`.`episodesId` INNER JOIN `Views` `V` ON `E`.`id` = `V`.`episodesId`;
CREATE VIEW `V_Movies`  AS SELECT `D`.*, `M`.`quality`, COUNT(`L`.`id`) AS `likes`, AVG(`R`.`rating`) AS `rating`, COUNT(`V`.`id`) AS `views` FROM `Details` `D` INNER JOIN `Movies` `M` ON `D`.`id` = `M`.`detailsId` INNER JOIN `Likes` `L` ON `M`.`id` = `L`.`episodesId` INNER JOIN `Reviews` `R` ON `M`.`id` = `R`.`moviesId` INNER JOIN `Views` `V` ON `M`.`id` = `V`.`moviesId`;
CREATE VIEW `V_Series`  AS SELECT `D`.*, MAX(DISTINCT `E`.`season`) AS `seasonsNumber`, COUNT(`L`.`id`) AS `likes`, AVG(`R`.`rating`) AS `rating` FROM `Details` `D` INNER JOIN `Series` `S` ON `D`.`id` = `S`.`detailsId` INNER JOIN `Episodes` `E` ON `S`.`id` = `E`.`seriesId` INNER JOIN `Likes` `L` ON `S`.`id` = `L`.`seriesId` INNER JOIN `Reviews` `R` ON `S`.`id` = `R`.`seriesId`;

SET FOREIGN_KEY_CHECKS = 1;
